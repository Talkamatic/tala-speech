#+TITLE: TalaSpeech 2 interface description
TalaSpeech [[https://stately.ai/docs/actors][actor]] can be accessed through ~window.TalaSpeech~.

Events to control TalaSpeech:
- ~window.TalaSpeech.send({ type: "SETUP"; value: TDMSettings })~ :: configure TalaSpeech.
  #+begin_src javascript
    window.TalaSpeech.send({
      type: "SETUP",
      value: {
        deviceID: "", /** required */
        endpoint: "", /** required, <endpoint_URL> */
        azureCredentials: "", /** required, <azure proxy URL or {key: "...",  endpoint: "..."}>*/
        azureRegion: "", /** required */
        locale: "en-US", /** default */
        sessionObjectAdditions: {}, /** default */
        asrDefaultCompleteTimeout: 0, /** default */
        asrDefaultNoInputTimeout: 5000, /** default */
        ttsDefaultVoice: "en-US-DavisNeural", /** default */
        azureLanguageCredentials: undefined, /** default, not supported by TDM*/
        speechRecognitionEndpointId: undefined /** default */
        },
    })
  #+end_src

- ~window.TalaSpeech.send({type: "TURNPAGE", value: "1"})~ :: "turn
  page" to get to a new dialogue (in this example to page 1)
- ~window.TalaSpeech.send({type: "PREPARE"})~ :: prepare ASR and TTS resources
- ~window.TalaSpeech.send({type: "START"})~ :: start the dialogue
- ~window.TalaSpeech.send({type: "CONTROL"})~ :: pause/continue
- ~window.TalaSpeech.send({type: "STOP"})~ :: stop


Observing state:
- UI state: ~window.TalaSpeechUIState~ (see below)

- In addition (optionally):
  - Tala-speech: ~window.TalaSpeech.getSnapshot().value~
  - Talkamatic backend: ~window.TalaSpeech.getSnapshot().context.tdmState~
  - SpeechState (ASR and TTS status):
   ~window.TalaSpeech.getSnapshot().context.spstRef.getSnapshot().value~
* UI State values
    - ~"initiating"~ :: initial state, waiting for ~SETUP~
    - ~"before-prepare"~ :: connection with backend established, waiting for ~PREPARE~
    - ~"ready"~ :: ready to ~START~
    - ~"speaking"~ :: system is speaking
    - ~"recognising"~ :: system is recognising (listening)
    - ~"idle"~ :: gap between speaking and listening ("thinking"), intended to be very short
    - ~"speaking-paused"~ :: speaking is paused
    - ~"recognising-paused"~ :: listening is paused
    - ~"end"~ :: dialogue has reached its end (need to ~TURN_PAGE~ and ~START~)
    - ~"stopped"~ :: dialogue is stopped. Reload the page or ~SETUP~ to start over.

* COMMENT Statecharts
([[http://www.wisdom.weizmann.ac.il/~dharel/SCANNED.PAPERS/Statecharts.pdf ][Harel statecharts]])
** Tala-speech
#+begin_src plantuml :results output replace :file docs/diagrams/tala-speech.svg :exports results
  skinparam defaultFontName Helvetica
  [*] --> DM
  DM --> DM: TURNPAGE
  state DM {
    BeforeSetup --> GetPages: SETUP
    GetPages --> BeforePrepare
    BeforePrepare --> Prepare: PREPARE
    Prepare --> Idle: ASRTTS_READY
    Idle --> Active: START
    Active --> Stopped: STOP
    Active --> End
    state Fail
  }
#+end_src

#+RESULTS:
[[file:docs/diagrams/tala-speech.svg]]


#+begin_src plantuml :results output replace :file docs/diagrams/conversation.svg :exports results
  skinparam defaultFontName Helvetica
  state Conversation {
     state Adjacency {
       [*] --> Prompt
       Prompt: entry /speak
       Ask: entry /listen
       Prompt --> Ask: SPEAK_COMPLETE
       Prompt --> Prompt: SPEAK_COMPLETE (passivity == 0)
       Ask --> Prompt: LISTEN_COMPLETE
     }
     --
     state TDMCalls {
        [*] --> Start
        Start: entry /invoke_sendSegment
        Start --> Idle: onDone /tdmAssign
        Idle --> NLInput: RECOGNISED
        Idle --> Passivity: ASR_NOINPUT
        NLInput: entry /invoke_nlInput
        NLInput --> Idle: onDone /tdmAssign
        Passivity: entry /invoke_passivity
        Passivity --> Idle: onDone /tdmAssign
     }
  }
#+end_src

#+RESULTS:
[[file:docs/diagrams/conversation.svg]]


** To run speechstate locally (for development)

run:

$ cd path/to/speechstate
$ yarn exec tsc

$ cd path/to/tala-speech
$ yarn remove speechstate
$ yarn add speechstate@file:relative/path/to/speechstate


In order to get changes from speechstate reflected in tala-speech:

in speechstate:
$ yarn exec tsc

in tala-speech
$ yarn
$ yarn dev

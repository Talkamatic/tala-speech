pipeline {
    agent { label 'docker' }

    options {
        buildDiscarder(
            logRotator(
                artifactDaysToKeepStr: '',
                artifactNumToKeepStr: '',
                daysToKeepStr: '',
                numToKeepStr: '10'
            )
        )
        timestamps()
        timeout(time: 1, unit: 'HOURS')
    }

    triggers {
        gerrit(
            customUrl: '',
            gerritProjects:[
                [
                    branches: [
                        [
                            compareType: 'ANT',
                            pattern: 'master'
                        ]
                    ],
                    compareType: 'PLAIN',
                    disableStrictForbiddenFileVerification: false,
                    pattern: 'speechstate'
                ]
            ],
            serverName: 'Talkamatic',
            triggerOnEvents: [
                refUpdated()
            ],
            skipVote: [
              onSuccessful: false,
              onFailed    : false,
              onUnstable  : false,
              onNotBuilt  : false
            ]
        )
    }

    stages {
        stage('clean') {
            steps {
                step([$class: 'WsCleanup'])
            }
        }

        stage('checkout') {
            steps {
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/master']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [
                            [
                                $class: 'SubmoduleOption',
                                disableSubmodules: false,
                                parentCredentials: true
                            ]
                        ],
                        submoduleCfg: [],
                        userRemoteConfigs: [[
                            credentialsId: 'jenkinsatgerrit',
                            url: 'ssh://jenkins@gerrit.talkamatic.se:29418/speechstate'
                        ]]
                    ])
                    env.COMMIT_TO_RELEASE = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
                }
            }
        }

        stage('build image') {
            steps {
                sh "docker build . --pull --tag talkamatic/speechstate:${env.COMMIT_TO_RELEASE}"
            }
        }

        stage('push image') {
            steps {
                withCredentials([[$class: 'StringBinding', credentialsId: 'dockerhubcred', variable: 'pw']]) {
                    sh "echo ${pw} | docker login -u zigit --password-stdin"
                }
                sh "docker push talkamatic/speechstate:${env.COMMIT_TO_RELEASE}"
                sh "docker tag talkamatic/speechstate:${env.COMMIT_TO_RELEASE} talkamatic/speechstate:latest"
                sh "docker push talkamatic/speechstate:latest"
            }
        }

        stage('deploy latest') {
            steps {
                build job: 'deploy-containers', parameters: [
                    [
                        $class: 'StringParameterValue',
                        name: 'IMAGE',
                        value: "speechstate"
                    ],
                    [
                        $class: 'StringParameterValue',
                        name: 'TAG',
                        value: "latest"
                    ],
                    [
                        $class: 'StringParameterValue',
                        name: 'COMMIT',
                        value: "${env.COMMIT_TO_RELEASE}"
                    ]
                ]
            }
        }
    }
}
